syntax = "proto3";

import "Delta.proto";

// A message sent from Proxy to the browser
message ForwardMsg {
  oneof type {
    ////
    // Report Lifetime
    ////

    Initialize initialize = 1;
    NewReport new_report = 2;
    Delta delta = 3;
    bool report_finished = 4;

    ////
    // Upload Progress
    ////

    // Indicates the % progres of a report upload.
    uint32 upload_report_progress = 5;

    // Indicates that the upload is complete and gives the URL.
    string report_uploaded = 6;

    ///
    // State changes and events
    ///

    // ReportSession state changed. This is the new state.
    SessionState session_state_changed = 7;

    // A SessionEvent was emitted.
    SessionEvent session_event = 8;
  }
}

// This is the first message that is sent when the connection is opened.
// It contains streamlit configuration data, and the session state
// that existed at the time of connection.
message Initialize {
  // True if saving is properly configured.
  bool sharing_enabled = 1;

  // If true, tells Streamlit to log datpoints for our own stats when the user
  // performs certain actions.
  bool gather_usage_stats = 2;

  // Python streamlit version.
  string streamlit_version = 3;

  // The session state at the time the connection
  // was established
  SessionState session_state = 5;

  UserInfo user_info = 6;
}

// This is the first message that is sent when a new report is run
message NewReport {
  // The report ID
  string id = 1;

  // The command line that launched this report.
  repeated string command_line = 2;

  // The basename of the script that launched this report. Example: "foo.py"
  string name = 3;
}

// State for a session. Sent as part of the Initialize message, and also
// on ReportSession state change events.
message SessionState {
  // If true, streamlit will re-run the report if it detects that the report
  // has been changed. This value comes from the proxy.watchFileSystem config.
  // The browser can change this option; it's sent here so that the browser
  // shows the correct initial value in its Settings dialog.
  bool run_on_save = 1;

  // True if the report is being run by a client right now.
  bool report_is_running = 2;
}

// A transient event sent to all browsers connected to an associated report.
message SessionEvent {
  oneof type {
    // The report changed on disk, but is *not* being re-run automatically.
    // The browser should prompt the user to re-run.
    bool report_changed_on_disk = 1;

    // The report was running, but it was manually stopped before
    // completion.
    bool report_was_manually_stopped = 2;
  }
}

message UserInfo {
  string installation_id = 1;
}
