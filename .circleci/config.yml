# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
workflows:
  version: 2
  test:
    jobs:
      - test-3.6.6
      - test-3.5.6
      - test-2.7.15

jobs:
  test-3.6.6: &test-template
    docker:
      - image: circleci/python:3.6.6-jessie

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: Copy python specific Pipfile.lock
          command: |
            cp -f lib/Pipfile.locks/${PYTHON_VERSION} lib/Pipfile.lock

      - run:
          name: create checksum for all protobufs.
          command: |
            md5sum protobuf/*.proto > ~/protobuf.md5

      - restore_cache:
          keys:
          - python-venv-{{ checksum "lib/Pipfile.lock" }}

      - restore_cache:
          keys:
          - nvm_node_modules-{{ checksum "frontend/package-lock.json" }}

      - restore_cache:
          keys:
          - protobuf-{{ checksum "~/protobuf.md5" }}

      - run:
          name: install nvm
          command: |
            if [ ! -d ~/.nvm ] ; then
              # install nodejs via nvm
              curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash
              source "$HOME/.nvm/nvm.sh"
              nvm install --lts=dubnium
            fi
            if [ ! -d frontend/node_modules ] ; then
              source "$HOME/.nvm/nvm.sh"
              make react-init
            fi
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo 'source "$NVM_DIR/nvm.sh"' >> $BASH_ENV

      - run:
          name: create virtual envs
          command: |
            # activate virtual environment
            if [ ! -d venv ] ; then
              if [ "${CIRCLE_JOB}" = "test-2.7.15" ] ; then
                pip install virtualenv
                python -m virtualenv venv
              else
                python -m venv venv
              fi
              source venv/bin/activate
              make setup
              make pipenv
              deactivate
            else
              echo 'Virtualenv already exists, not creating'
            fi
            echo 'source venv/bin/activate' >> $BASH_ENV
            source venv/bin/activate
            make develop

      - run:
          name: protobuf
          command: |
            # There's a chance this file could be a cached version when
            # the protobuf cache is restored, so checkout from github to
            # make sure.
            git checkout -- lib/streamlit/protobuf/__init__.py
            if [ ! -e frontend/src/protobuf.js -o ! -e lib/streamlit/protobuf/DataFrame_pb2.py ] ; then
              # install protobuf v3
              echo "deb http://ppa.launchpad.net/maarten-fonville/protobuf/ubuntu trusty main" | sudo tee /etc/apt/sources.list.d/protobuf.list
              sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4DEA8909DC6A13A3
              sudo apt-get update -y
              sudo apt-get install -y protobuf-compiler
              make protobuf
            fi

      # run tests including code coverage
      - run:
          name: run tests
          command: |
            make pycoverage

      - save_cache:
          key: python-venv-{{ checksum "lib/Pipfile.lock" }}
          paths:
            - venv

      - save_cache:
          key: nvm_node_modules-{{ checksum "frontend/package-lock.json" }}
          paths:
            - frontend/node_modules
            - ~/.nvm

      - save_cache:
          key: protobuf-{{ checksum "~/protobuf.md5" }}
          paths:
            - frontend/src/protobuf.js
            - lib/streamlit/protobuf

  test-3.5.6:
    <<: *test-template
    docker:
      - image: circleci/python:3.5.6-jessie
  test-2.7.15:
    <<: *test-template
    docker:
      - image: circleci/python:2.7.15-jessie
